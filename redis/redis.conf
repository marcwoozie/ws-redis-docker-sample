# デーモン化するときはyes
# （プロダクションなら普通yes）
daemonize no


# デーモン化したときのPID
pidfile /var/run/redis.pid


# クライアント向けの開放port
port 6379


# TCP listen() backlog.
# （tcp connectionの待ちの上限？）
tcp-backlog 511

# 必要に応じて、bindするネットワークのインターフェースを限定できます。
# （private内で運用するならコメントアウトでよいかと）
# bind 192.168.1.100 10.0.0.1
# bind 127.0.0.1

# クライアントからのコネクションに対してUnix socketで対応します。デフォルトではnoです。
unixsocket /tmp/redis.sock
unixsocketperm 700

# 指定時間過ぎるとコネクションが切れる（秒）。０ならdisable
timeout 0


# ０でなければクライアントへのTCP ACKsに SO_KEEPALIVE を使う（秒）。これは以下の利点がある。
# 1) dead peerの検出
# 2) networkの疎通を確認する。
# Linuxでは数秒で設定されている。
# もし二倍の時間が過ぎたら接続は破棄される。
# （60が一般的と書いてあるので、本番時はそうしておくのが無難でしょうか）
tcp-keepalive 0

# ログレベル
# debug (たくさん。 development/testing向け)
# verbose (多すぎない程度にたくさん)
# notice (普通。本番向き。)
# warning (重要なもののみ。玄人 or リソース厳しいときのみ？)
loglevel notice

# logfile名。空ならstdout
# （pathで指定してもいい？workdir直下のみ？）
logfile ""

# loggingにSyslogを使う
# syslog-enabled no

# syslogの識別子
# syslog-ident redis

# syslogのfacility、LOCAL0-LOCAL7のどれか.
# syslog-facility local0

# databaseの個数。０〜N-1まで作られ、初期の接続先は０。
# クラスタ構成するならv3.0では一つしか使えない。
databases 1